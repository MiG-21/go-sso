package web

import (
	"strings"
	"time"

	"github.com/MiG-21/go-sso/internal"
	"github.com/MiG-21/go-sso/internal/event"
	"github.com/MiG-21/go-sso/internal/models"
	"github.com/MiG-21/go-sso/internal/web/handlers"
	swagger "github.com/arsmn/fiber-swagger/v2"
	goJson "github.com/goccy/go-json"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/gofiber/template/html"
	"github.com/rs/zerolog"
	"go.uber.org/dig"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "github.com/MiG-21/go-sso/api/docs"
)

type (
	InitServerParams struct {
		dig.In

		Config       *internal.Config
		Logger       *zerolog.Logger
		Validator    *internal.ServiceValidator
		Sso          models.SSOer
		EventService *event.Service
	}
)

func SetupServer(p InitServerParams) *fiber.App {
	htmlPath := strings.TrimRight(p.Config.Frontend.Path, "/") + "/template/sso/"
	engine := html.New(htmlPath, ".html")
	engine.Reload(true)

	app := fiber.New(fiber.Config{
		Views:           engine,
		AppName:         p.Config.AppName,
		ReadBufferSize:  p.Config.Http.ReadBufferSize, // Make sure these are big enough.
		WriteBufferSize: p.Config.Http.WriteBufferSize,
		ReadTimeout:     time.Duration(p.Config.Http.ReadTimeout) * time.Second,
		WriteTimeout:    time.Duration(p.Config.Http.WriteTimeout) * time.Second,
		IdleTimeout:     time.Duration(p.Config.Http.IdleTimeout) * time.Second, // This can be long for keep-alive connections.
		// DisableHeaderNormalizing:  true, // If you're not going to look at headers or know the casing you can set this.
		// DisableDefaultContentType: true, // Don't send Content-Type: text/plain if no Content-Type is set manually.
		DisableStartupMessage: true,
		JSONDecoder:           goJson.Unmarshal,
		JSONEncoder:           goJson.Marshal,
	})

	// Default middleware fiberApp
	app.Use(recover.New())
	// requestId middleware
	app.Use(requestid.New())
	// logger middleware
	app.Use(handlers.Logger(p.Logger))

	app.Static("/", p.Config.Frontend.Path, fiber.Static{
		Compress:      true,
		ByteRange:     true,
		Browse:        true,
		Index:         p.Config.Frontend.Index,
		CacheDuration: 10 * time.Second,
		MaxAge:        3600,
	})

	app.Get("/login", handlers.LoginFormHandler(p.Validator))
	app.Post("/login", handlers.AuthCookieHandler(p.Sso, p.Validator))
	app.Get("/logout", handlers.LogoutHandler(p.Sso, p.Validator))
	app.Get("/verification", handlers.VerificationHandler(p.Config, p.Sso, p.Validator))
	app.Get("/verified", handlers.VerifiedHandler())
	passGroup := app.Group("password")
	passGroup.Get("/recover", handlers.PasswordRecoverFormHandler())
	passGroup.Post("/recover", handlers.PasswordRecoverHandler(p.Config, p.Sso, p.Validator, p.EventService))
	passGroup.Get("/recover/send", handlers.PasswordRecoverSendHandler())
	passGroup.Get("/change", handlers.PasswordChangeFormHandler(p.Config, p.Validator))
	passGroup.Post("/change", handlers.PasswordChangeHandler(p.Sso, p.Validator))

	// API routes
	versionGroup := app.Group("v1")

	healthGroup := versionGroup.Group("healthcheck")
	healthGroup.Get("/ping", handlers.HealthPingHandler)
	healthGroup.Get("/info", handlers.HealthInfoHandler(p.Config))

	versionGroup.Post("/auth_token", handlers.AuthTokenHandler(p.Sso, p.Validator))

	// user routes
	userGroup := versionGroup.Group("user")
	userGroup.Post("/register", handlers.CreateUserHandler(p.Config, p.Sso, p.Validator, p.EventService))
	userGroup.Post("/me", handlers.Authenticate(p.Config), handlers.UserInfoHandler(p.Sso))

	// application routes
	appGroup := versionGroup.Group("application", handlers.Authenticate(p.Config, "admin"))
	appGroup.Post("/create", handlers.CreateApplicationHandler(p.Sso, p.Validator))

	// swagger
	app.Get("/swagger/*", swagger.HandlerDefault)

	return app
}
